---
// Import the necessary dependencies
import { Image } from "astro:assets";
import IconBlock from "@components/ui/blocks/IconBlock.astro";
import Icon from "@components/ui/icons/Icon.astro";
import before from "@images/spring.png"
import after from "@images/winter.png"
interface Feature {
  heading: string;
  content: string;
  svg: string;
}

interface Props {
  title?: string;
  subTitle?: string;
  features?: Feature[];
  src?: any;
  alt?: string;
}
// Define props from Astro
const { title, subTitle, src, alt, features } = Astro.props;
const image1 = before; // Image path for the base image
const image2 = after; // Image path for the overlay image
---

<section
  class="mx-auto max-w-[85rem] px-4 py-0 sm:px-6 lg:px-8 lg:py-0 2xl:max-w-full"
>
  <style>
    .comparison-container {
      position: relative;
      width: 100%;
      height: 500px;
      overflow: hidden;
    }

    .comparison-container img {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .overlay-image {
      clip-path: inset(0 20% 0 0); /* Initially shows part of the overlay image */
      transition: clip-path 0.2s ease-out;
    }

    /* The draggable slider */
    .slider {
      position: absolute;
      top: 50%;
      left: 80%;
      width: 40px;
      height: 40px;
      background-color: rgba(9, 132, 255, 0.3); /* Semi-transparent background */
      border-radius: 50%;
      cursor: ew-resize;
      z-index: 2;
      transform: translate(-50%, -50%);
      display: flex;
      align-items: center;
      justify-content: center;
      transition: left 0.2s ease-out;
    }

    /* Arrow styling */
    .slider .arrow {
      font-size: 50px;
      color: rgba(213, 218, 229, 0.8);
      user-select: none;
    }
  </style>

  <div class="comparison-container" id="comparison">
  <!-- Base image -->
  <Image src={image1} alt="Base Image" style="border: 1px solid #000"/>

  <!-- Overlay image -->
  <Image src={image2} alt="Overlay Image" class="overlay-image w-full"  id="overlayImage" style="border: 1px solid #000" />

    <!-- Custom Circular Slider -->
    <div class="slider">
      <span class="arrow">←</span>
      <span class="arrow">→</span>
    </div>
  </div>

  <script>
    const container = document.querySelector('.comparison-container');
    const slider = container!.querySelector('.slider');
    const overlayImage = container!.querySelector('.overlay-image');
    let isDragging = false;

    // Function to handle movement (mouse or touch)
    const handleMove = (clientX: number) => {
      const containerRect = container!.getBoundingClientRect();
      let newLeft = clientX - containerRect.left;

      // Limit the slider to the container bounds
      if (newLeft < 0) newLeft = 0;
      if (newLeft > containerRect.width) newLeft = containerRect.width;

      // Update the slider position
      const newLeftPercentage = (newLeft / containerRect.width) * 100;

      // Update the slider and overlay image's clip-path
      // Cast slider and overlayImage to HTMLElement before accessing style
      (slider as HTMLElement).style.left = `${newLeftPercentage}%`;

      // Update the overlay image's clip-path based on slider position
      (overlayImage as HTMLElement).style.clipPath = `inset(0 ${100 - newLeftPercentage}% 0 0)`;
    };

    // Handle mouse events
    slider!.addEventListener('mousedown', () => {
      isDragging = true;
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
    });

    document.addEventListener('mousemove', (event) => {
      if (isDragging) {
        handleMove(event.clientX);
      }
    });

    // Handle touch events
    slider!.addEventListener('touchstart', () => {
      isDragging = true;
    });

    document.addEventListener('touchend', () => {
      isDragging = false;
    });

    document.addEventListener('touchmove', (event) => {
      if (isDragging) {
        const touch = event.touches[0]; // Get the first touch point
        handleMove(touch.clientX);
      }
    });
  </script>
</section>
